{"version":3,"sources":["Image.tsx"],"names":["_","React","Image","RNImage","Animated","StyleSheet","View","Platform","BlurView","CacheManager","mounted","state","uri","undefined","intensity","Value","load","props","prevProps","prevState","preview","transitionDuration","newURI","timing","duration","toValue","useNativeDriver","OS","start","options","onError","get","getPath","path","setState","nativeEvent","error","Error","style","defaultSource","tint","onLoad","onLoadEnd","onLoadStart","onLayout","otherProps","isImageReady","opacity","interpolate","inputRange","outputRange","flattenedStyle","flatten","computedStyle","absoluteFill","transform","pickBy","_val","key","propsToCopy","indexOf","result","value","borderWidth","backgroundColor","black","white","Component","defaultProps","AnimatedBlurView","createAnimatedComponent"],"mappings":"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","sourcesContent":["// @flow\nimport * as _ from \"lodash\";\nimport * as React from \"react\";\nimport {\n  Image as RNImage,\n  Animated,\n  StyleSheet,\n  View,\n  Platform,\n  ImageStyle,\n  ImageURISource,\n  ImageSourcePropType,\n  StyleProp,\n  LayoutChangeEvent\n} from \"react-native\";\nimport { BlurView } from \"expo-blur\";\n\nimport CacheManager, { DownloadOptions } from \"./CacheManager\";\n\ninterface ImageProps {\n  style?: StyleProp<ImageStyle>;\n  defaultSource?: ImageURISource | number;\n  preview?: ImageSourcePropType;\n  options?: DownloadOptions;\n  uri: string;\n  transitionDuration?: number;\n  tint?: \"dark\" | \"light\";\n  onError: (error: { nativeEvent: { error: Error } }) => void;\n  onLoadStart: () => void;\n  onLoadEnd: () => void;\n  onLoad: () => void;\n  onLayout: (e: LayoutChangeEvent) => void;\n}\n\ninterface ImageState {\n  uri: string | undefined;\n  intensity: Animated.Value;\n}\n\nexport default class Image extends React.Component<ImageProps, ImageState> {\n  mounted = true;\n\n  static defaultProps = {\n    transitionDuration: 300,\n    tint: \"dark\",\n    onError: () => {},\n    onLoadStart: () => {},\n    onLoadEnd: () => {},\n    onLoad: () => {},\n    onLayout: () => {}\n  };\n\n  state = {\n    uri: undefined,\n    intensity: new Animated.Value(100)\n  };\n\n  componentDidMount() {\n    this.load(this.props);\n  }\n\n  componentDidUpdate(prevProps: ImageProps, prevState: ImageState) {\n    const { preview, transitionDuration, uri: newURI } = this.props;\n    const { uri, intensity } = this.state;\n    if (newURI !== prevProps.uri) {\n      this.load(this.props);\n    } else if (uri && preview && prevState.uri === undefined) {\n      Animated.timing(intensity, {\n        duration: transitionDuration,\n        toValue: 0,\n        useNativeDriver: Platform.OS === \"android\"\n      }).start();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  async load({ uri, options = {}, onError }: ImageProps): Promise<void> {\n    if (uri) {\n      try {\n        const path = await CacheManager.get(uri, options).getPath();\n        if (this.mounted) {\n          if (path) {\n            this.setState({ uri: path });\n          } else {\n            onError({ nativeEvent: { error: new Error(\"Could not load image\") } });\n          }\n        }\n      } catch (error) {\n        onError({ nativeEvent: { error } });\n      }\n    }\n  }\n\n  render() {\n    const { preview, style, defaultSource, tint, onLoad, onLoadEnd, onLoadStart, onLayout, ...otherProps } = this.props;\n    const { uri, intensity } = this.state;\n    const isImageReady = !!uri;\n    const opacity = intensity.interpolate({\n      inputRange: [0, 100],\n      outputRange: [0, 0.5]\n    });\n    const flattenedStyle = StyleSheet.flatten(style);\n    const computedStyle: StyleProp<ImageStyle> = [\n      StyleSheet.absoluteFill,\n      _.transform(_.pickBy(flattenedStyle, (_val, key) => propsToCopy.indexOf(key) !== -1), (result, value: any, key) =>\n        Object.assign(result, { [key]: value - (flattenedStyle.borderWidth || 0) })\n      )\n    ];\n    return (\n      <View {...{ style }} onLayout={onLayout}>\n        {!!defaultSource && !isImageReady && (\n          <RNImage onLoadStart={onLoadStart} source={defaultSource} style={computedStyle} {...otherProps} />\n        )}\n        {!!preview && (\n          <RNImage\n            source={preview}\n            style={computedStyle}\n            blurRadius={Platform.OS === \"android\" ? 0.5 : 0}\n            {...otherProps}\n          />\n        )}\n        {isImageReady && (\n          <RNImage onLoad={onLoad} onLoadEnd={onLoadEnd} source={{ uri }} style={computedStyle} {...otherProps} />\n        )}\n        {!!preview && Platform.OS === \"ios\" && <AnimatedBlurView style={computedStyle} {...{ intensity, tint }} />}\n        {!!preview && Platform.OS === \"android\" && (\n          <Animated.View style={[computedStyle, { backgroundColor: tint === \"dark\" ? black : white, opacity }]} />\n        )}\n      </View>\n    );\n  }\n}\n\nconst black = \"black\";\nconst white = \"white\";\nconst propsToCopy = [\n  \"borderRadius\",\n  \"borderBottomLeftRadius\",\n  \"borderBottomRightRadius\",\n  \"borderTopLeftRadius\",\n  \"borderTopRightRadius\"\n];\nconst AnimatedBlurView = Animated.createAnimatedComponent(BlurView);\n"]}