{"version":3,"sources":["CacheManager.ts"],"names":["_","FileSystem","MD5","_baseDir","cacheDirectory","getBaseDir","setBaseDir","baseDir","CacheEntry","uri","options","BASE_DIR","getInfoAsync","exists","makeDirectoryAsync","intermediates","getCacheEntry","path","tmpPath","createDownloadResumable","downloadAsync","result","status","undefined","createBaseDir","moveAsync","from","to","CacheManager","entries","deleteAsync","idempotent","Error","size","getCacheKey","filename","substring","lastIndexOf","indexOf","length","ext","key","removeCacheEntry","uniqueId","info"],"mappings":"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","sourcesContent":["// @flow\nimport * as _ from \"lodash\";\nimport * as FileSystem from \"expo-file-system\";\nimport MD5 from \"crypto-js/md5\";\n\nexport interface DownloadOptions {\n  md5?: boolean;\n  headers?: { [name: string]: string };\n}\n\nlet _baseDir = `${FileSystem.cacheDirectory}expo-image-cache/`;\nconst getBaseDir = (): string => _baseDir;\nexport const setBaseDir = (baseDir: string): string => _baseDir = baseDir;\n\nexport class CacheEntry {\n  uri: string;\n\n  options: DownloadOptions;\n\n  constructor(uri: string, options: DownloadOptions) {\n    this.uri = uri;\n    this.options = options;\n  }\n\n  async createBaseDir(): Promise<void> {\n    const BASE_DIR = getBaseDir();\n    const { exists } = await FileSystem.getInfoAsync(BASE_DIR);\n    if(!exists){\n      try{\n        await FileSystem.makeDirectoryAsync(BASE_DIR, {intermediates: true});\n      }catch(err){\n      }\n    }\n  }\n\n  async getPath(): Promise<string | undefined> {\n    const { uri, options } = this;\n    const { path, exists, tmpPath } = await getCacheEntry(uri);\n    if (exists) {\n      return path;\n    }\n    const result = await FileSystem.createDownloadResumable(uri, tmpPath, options).downloadAsync();\n    // If the image download failed, we don't cache anything\n    if (result && result.status !== 200) {\n      return undefined;\n    }\n    this.createBaseDir();\n    await FileSystem.moveAsync({ from: tmpPath, to: path });\n    return path;\n  }\n}\n\nexport default class CacheManager {\n  static entries: { [uri: string]: CacheEntry } = {};\n\n  static get(uri: string, options: DownloadOptions): CacheEntry {\n    if (!CacheManager.entries[uri]) {\n      CacheManager.entries[uri] = new CacheEntry(uri, options);\n    }\n    return CacheManager.entries[uri];\n  }\n\n  static async clearCache(): Promise<void> {\n    const BASE_DIR = getBaseDir();\n    await FileSystem.deleteAsync(BASE_DIR, { idempotent: true });\n    await FileSystem.makeDirectoryAsync(BASE_DIR);\n  }\n\n  static async getCacheSize(): Promise<number> {\n    const result = await FileSystem.getInfoAsync(_baseDir);\n    if (!result.exists) {\n      throw new Error(`${_baseDir} not found`);\n    }\n    return result.size;\n  }\n}\n\nconst getCacheKey = (uri: string): { key: string, ext: string } => {\n  const filename = uri.substring(uri.lastIndexOf(\"/\"), uri.indexOf(\"?\") === -1 ? uri.length : uri.indexOf(\"?\"));\n  const ext = filename.indexOf(\".\") === -1 ? \".jpg\" : filename.substring(filename.lastIndexOf(\".\"));\n  return {key: 'I' + MD5(uri), ext};\n};\n\n\n/**\n * As we can now set an uri that is not in the cacheDirectory,\n * we need to be able to delete files.\n */\nexport const removeCacheEntry = async (uri: string): Promise<void> => {\n  const {ext, key} = getCacheKey(uri);\n  return await FileSystem.deleteAsync(\n      `${getBaseDir()}${key}${ext}`,\n      {idempotent: true}\n  );\n};\n\nconst getCacheEntry = async (uri: string): Promise<{ exists: boolean, path: string, tmpPath: string }> => {\n  const BASE_DIR = getBaseDir();\n  const {ext, key} = getCacheKey(uri);\n  const path = `${BASE_DIR}${key}${ext}`;\n  const tmpPath = `${BASE_DIR}${key}-${_.uniqueId()}${ext}`;\n  // TODO: maybe we don't have to do this every time\n  try {\n      await FileSystem.makeDirectoryAsync(BASE_DIR);\n  } catch (e) {\n      // do nothing\n  }\n  let info = null;\n   try{\n     info = await FileSystem.getInfoAsync(path);\n     const {exists} = info;\n     return { exists, path, tmpPath };\n   }catch(e){\n   }\n   return { exists: false, path, tmpPath };\n};\n\n"]}